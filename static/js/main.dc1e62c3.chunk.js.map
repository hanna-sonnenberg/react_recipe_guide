{"version":3,"sources":["Components/Recipe.js","Components/Navbar.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","image","ingredients","url","className","src","alt","map","ingredient","original","href","target","Navbar","getSearch","search","updateSearch","onSubmit","type","value","onChange","placeholder","api","axios","create","baseURL","timeout","params","apiKey","process","App","useState","recipes","setRecipe","setSearch","query","setQuery","recipeUrls","setRecipeUrls","useEffect","getRecipes","getRecipeInformationBulk","recipeIds","a","get","ids","includeNutritions","response","data","console","log","recipe","id","join","recipeInfos","forEach","recipeInfo","sourceUrl","event","preventDefault","missedIngredients","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc1e62c3.chunk.js","sourcesContent":["import React from 'react';\nimport '../Styles/_Recipe.scss';\n\n// component Recipe takes the props\nconst Recipe = ({title, image, ingredients, url}) => {\n   \n    return(\n        <div className=\"recipe-card\">\n            <h3 className=\"recipe-title\">{title}</h3>\n            <img src={image} alt=\"\"/>\n            <h4 className=\"ingredients-text\">Ingredients</h4>\n            <ul className=\"ingredients-list\">\n            {ingredients.map(ingredient => (\n                <li key={ingredient.original}>{ingredient.original}</li>\n            ))} \n            </ul>\n            <a href={url} className=\"recipe-btn\" target=\"_blank\">Go to Recipe</a>        \n        </div>\n    )\n}\n\nexport default Recipe;\n\n","import React from 'react';\nimport App from './App';\nimport '../Styles/_App.scss';\nimport '../Styles/_Navbar.scss';\n\nconst Navbar = ({getSearch, search, updateSearch}) => {\n    return(\n        <div className=\"navbar\">\n            <div className=\"logo-side\">\n                <h1 className=\"logo-text\">Recipe Guide</h1>\n            </div>\n            <form className = \"search-form\" onSubmit={getSearch}>\n                <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"Search by ingredients ...\"/>\n                <button className=\"search-button\" type=\"submit\">Search</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Navbar;","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nimport Recipe from './Recipe';\nimport Navbar from './Navbar';\nimport findByIngredients from '../Mocks/findByIngredients';\nimport informationBulk from '../Mocks/informationBulk';\nimport '../Styles/_App.scss';\nimport '../_index.scss';\n\nconst API_KEY = process.env.REACT_APP_SPOONACULAR_API_KEY;\nconst API_KEY_TWO = process.env.REACT_APP_SPOONACULAR_2_API_KEY;\n\nconst api = axios.create({\n  baseURL: 'https://api.spoonacular.com/',\n  timeout: 1000,\n  params: {\n    apiKey: API_KEY_TWO,\n  }\n});\n\n// const mock = new MockAdapter(api);\n// mock.onGet(\"recipes/findByIngredients\").reply(200, findByIngredients);\n// mock.onGet(\"recipes/informationBulk\").reply(200, informationBulk);\n\n\n// create App component\n\nconst App = () => {\n  // Authentification\n  // set states\n  const [recipes, setRecipe] = useState([]);\n  // create state for the search\n  const [search, setSearch] = useState('');\n  // only fetch data after user clicks on search button\n  const [query, setQuery] = useState('pumpkin');\n  const [recipeUrls, setRecipeUrls] = useState({});\n\n  useEffect(() => {\n    // console.log('Effect has been run');\n    // run the function getRecipes to fetch the data from the Api\n    getRecipes();\n  }, [query]);\n\n  const getRecipeInformationBulk = async (recipeIds) => {\n    try {\n      const response = await api.get('recipes/informationBulk', {\n        params: {\n          ids: recipeIds,\n          includeNutritions: false,\n        }\n      });\n      const data = response.data;\n      return data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  // fetch Recipe Informations\n  const getRecipes = async () => {\n    if (query === '') {\n      return;\n    }\n    try {\n      const response = await api.get('recipes/findByIngredients', {\n        params: {\n          ingredients: query,\n        }\n      });\n      const { data } = response;\n\n      const recipeIds = data.map(recipe => recipe.id).join();\n      const recipeInfos =  await getRecipeInformationBulk(recipeIds);\n      console.log(recipeInfos);\n\n      const recipeUrls = {};\n      recipeInfos.forEach(recipeInfo => {\n        recipeUrls[recipeInfo.id] = recipeInfo.sourceUrl;\n      });\n\n      setRecipeUrls(recipeUrls);\n\n      setRecipe(data);\n      console.log(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // everytime user runs onChange the event runs\n  const updateSearch = (event) => {\n    // setSearch to the value 'search'\n    setSearch(event.target.value);\n    // console.log(search);\n  };\n\n  const getSearch = (event) => {\n    event.preventDefault(); // stop page refresh\n    setQuery(search);\n    setSearch('');\n  };\n\n  return(\n    <div className=\"App\">\n      <Navbar\n        getSearch = {getSearch}\n        search = {search}\n        updateSearch = {updateSearch}\n      />\n      <div className=\"recipe-cards-container\">\n        {recipes.map(recipe => {\n          const url = recipeUrls[recipe.id];\n          return (<Recipe \n            // Solution to the error: Each child in a list should have a unique \"key\" prop.\n            key = {recipe.title}\n            // props to display data fetched from API in Recipe Component\n            title = {recipe.title}\n            image = {recipe.image}\n            ingredients = {recipe.missedIngredients}\n            url = {url}\n          />);\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './_index.scss';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}